AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  MovierBack

  Sample SAM Template for MovierBack2

Globals:
  Function:
    Timeout: 10
  Api:
    Cors:
      AllowOrigin: "'*'"
      AllowHeaders: "'*'"
      AllowMethods: "'GET,PUT,POST,PATCH,DELETE,OPTIONS'"

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: CognitoAdminInitiateAuth
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminInitiateAuth
                  - cognito-idp:AdminRespondToAuthChallenge
                  - cognito-idp:AdminSetUserPassword
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminDeleteUser
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:AdminListGroupsForUser
                  - cognito-idp:AdminAddUserToGroup
                  - cognito-idp:AdminRemoveUserFromGroup
                  - cognito-idp:AdminGetUser
                  - cognito-idp:AdminGetUserAttributeVerificationCode
                  - cognito-idp:AdminConfirmSignUp
                  - cognito-idp:AdminForgetDevice
                  - cognito-idp:AdminConfirmDevice
                  - cognito-idp:AdminUpdateDeviceStatus
                  - cognito-idp:AdminEnableUser
                  - cognito-idp:AdminDisableUser
                  - cognito-idp:AdminResetUserPassword
                  - cognito-idp:AdminSetUserSettings
                  - cognito-idp:AdminUpdateAuthEventFeedback
                  - cognito-idp:AdminUserGlobalSignOut
                Resource: 'arn:aws:cognito-idp:us-east-1:*:*'
        - PolicyName: SSMGetParameter
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: "arn:aws:secretsmanager:us-east-1:533267376951:secret:prd/dataBase/appMovier-123456"

  MovierUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: Movier3
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: True
          RequireLowercase: True
          RequireNumbers: True
          RequireSymbols: True

  AdministradorGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Administrador
      UserPoolId: !Ref MovierUserPool
      Precedence: 1

  UsuariosGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Usuario
      UserPoolId: !Ref MovierUserPool
      Precedence: 2

  AuthorizationApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Name: AuthorizationApi

  MovieeAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: MovieeAuthorizer
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref MoviesApi
      Type: COGNITO_USER_POOLS
      ProviderARNs:
        - !GetAtt MovierUserPool.Arn

  MoviesApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: MoviesApi
      StageName: Prod
      Auth:
        Authorizers:
          MovieeAuthorizer:
            UserPoolArn: !GetAtt MovierUserPool.Arn

  CommenttAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CommenttAuthorizer
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref CommentsApi
      Type: COGNITO_USER_POOLS
      ProviderARNs:
        - !GetAtt MovierUserPool.Arn

  CommentsApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: CommentsApi
      StageName: Prod
      Auth:
        Authorizers:
          CommenttAuthorizer:
            UserPoolArn: !GetAtt MovierUserPool.Arn

  WatcheddAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: WatcheddAuthorizer
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref WatchedsAppi
      Type: COGNITO_USER_POOLS
      ProviderARNs:
        - !GetAtt MovierUserPool.Arn

  WatchedsAppi:
    Type: AWS::Serverless::Api
    Properties:
      Name: WatchedsAppi
      StageName: Prod
      Auth:
        Authorizers:
          WatcheddAuthorizer:
            UserPoolArn: !GetAtt MovierUserPool.Arn

  LoginUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: login/login_users/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        Login:
          Type: Api
          Properties:
            RestApiId: !Ref AuthorizationApi
            Path: /login
            Method: post

  SetPassFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: login/set_password/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        SetPassword:
          Type: Api
          Properties:
            RestApiId: !Ref AuthorizationApi
            Path: /set_password
            Method: post

  RegisterUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: login/insert_user_pool/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        SetPassword:
          Type: Api
          Properties:
            RestApiId: !Ref AuthorizationApi
            Path: /create_user
            Method: post

  RegisterMovieFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: movies/create_movie/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        CreateMovie:
          Type: Api
          Properties:
            Path: /create
            RestApiId: !Ref MoviesApi
            Method: post
            Auth:
              Authorizer: MovieeAuthorizer

  GettMovieFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: movies/get_movies/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        GetMovie:
          Type: Api
          Properties:
            Path: /getAll
            RestApiId: !Ref MoviesApi
            Method: get
            Auth:
              Authorizer: MovieeAuthorizer

  GetAllMoviesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: movies/get_all_movies/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        GetMovie:
          Type: Api
          Properties:
            Path: /getAllMovies
            RestApiId: !Ref MoviesApi
            Method: get
            Auth:
              Authorizer: MovieeAuthorizer

  GettMovieByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: movies/get_movie_by_id/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        GetMovie:
          Type: Api
          Properties:
            Path: /getMovie/{id}/{user_id}
            RestApiId: !Ref MoviesApi
            Method: get
            Auth:
              Authorizer: MovieeAuthorizer

  FindMoviesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: movies/search_movies/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        GetMovie:
          Type: Api
          Properties:
            Path: /searchMovies/{name}
            RestApiId: !Ref MoviesApi
            Method: get
            Auth:
              Authorizer: MovieeAuthorizer

  ModifyMovieFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: movies/update_movie/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        UpdateMovie:
          Type: Api
          Properties:
            Path: /update/{id}
            RestApiId: !Ref MoviesApi
            Method: put
            Auth:
              Authorizer: MovieeAuthorizer

  ChangeStatusOfMovieFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: movies/change_status_movie/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        GetComments:
          Type: Api
          Properties:
            Path: /status/{id}
            RestApiId: !Ref MoviesApi
            Method: patch
            Auth:
              Authorizer: MovieeAuthorizer

  AddCommentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: comments/create_comment/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        CreateComment:
          Type: Api
          Properties:
            Path: /create
            RestApiId: !Ref CommentsApi
            Method: post
            Auth:
              Authorizer: CommenttAuthorizer

  GetCommentsOfMovieFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: comments/get_comments/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        GetComments:
          Type: Api
          Properties:
            Path: /getComment/{id}
            RestApiId: !Ref CommentsApi
            Method: get
            Auth:
              Authorizer: CommenttAuthorizer

  DropCommentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: comments/delete_comment/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        DisableMovie:
          Type: Api
          Properties:
            Path: /delete
            RestApiId: !Ref CommentsApi
            Method: delete
            Auth:
              Authorizer: CommenttAuthorizer

  SeenMovieFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: watched/watched_movie/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        WatchedMovie:
          Type: Api
          Properties:
            Path: /watched
            RestApiId: !Ref WatchedsAppi
            Method: post
            Auth:
              Authorizer: WatcheddAuthorizer

  GetSeenMovieFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: watched/get_watched_movies_user/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        WatchedMovie:
          Type: Api
          Properties:
            Path: /watched/user/{id}
            RestApiId: !Ref WatchedsAppi
            Method: get
            Auth:
              Authorizer: WatcheddAuthorizer

Outputs:
  RegisterMovieApi:
    Description: "API Gateway endpoint URL for Prod stage for create movie function"
    Value: !Sub "https://${MoviesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/create"
  RegisterMovieFunction:
    Description: "Create Movie Lambda Function ARN"
    Value: !GetAtt RegisterMovieFunction.Arn

  GettMovieApi:
    Description: "API Gateway endpoint URL for Prod stage for get movies function"
    Value: !Sub "https://${MoviesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/getAll"
  GettMovieFunction:
    Description: "Get Movie Lambda Function ARN"
    Value: !GetAtt GettMovieFunction.Arn

  GetAllMoviesApi:
    Description: "API Gateway endpoint URL for Prod stage for get movies function"
    Value: !Sub "https://${MoviesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/getAllMovies"
  GetAllMoviesFunction:
    Description: "Get Movie Lambda Function ARN"
    Value: !GetAtt GetAllMoviesFunction.Arn

  GettMovieByIdApi:
    Description: "API Gateway endpoint URL for Prod stage for get movie by id function"
    Value: !Sub "https://${MoviesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/getMovie/{id}/{user_id}"
  GettMovieByIdFunction:
    Description: "Get Movie Lambda Function ARN"
    Value: !GetAtt GettMovieByIdFunction.Arn
  FindMoviesApi:
    Description: "API Gateway endpoint URL for Prod stage for get movie by id function"
    Value: !Sub "https://${MoviesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/searchMovies/{name}"
  FindMoviesFunction:
    Description: "Get Movie Lambda Function ARN"
    Value: !GetAtt FindMoviesFunction.Arn
  ModifyMovieApi:
    Description: "API Gateway endpoint URL for Prod stage for update movie function"
    Value: !Sub "https://${MoviesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/update/{id}"
  ModifyMovieFunction:
    Description: "Update Movie Lambda Function ARN"
    Value: !GetAtt ModifyMovieFunction.Arn

  ChangeStatusOfMovieApi:
    Description: "API Gateway endpoint URL for Prod stage for update movie function"
    Value: !Sub "https://${MoviesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/status/{id}"
  ChangeStatusOfMovieFunction:
    Description: "Update Movie Lambda Function ARN"
    Value: !GetAtt ChangeStatusOfMovieFunction.Arn

  AddCommentApi:
    Description: "API Gateway endpoint URL for Prod stage for create comment function"
    Value: !Sub "https://${CommentsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/create"
  AddCommentFunction:
    Description: "Create Comment Lambda Function ARN"
    Value: !GetAtt AddCommentFunction.Arn

  GetCommentsOfMovieApi:
    Description: "API Gateway endpoint URL for Prod stage for get comments function"
    Value: !Sub "https://${CommentsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/getComment/{id}"
  GetCommentsOfMovieFunction:
    Description: "Get Comments Lambda Function ARN"
    Value: !GetAtt GetCommentsOfMovieFunction.Arn

  DropCommentApi:
    Description: "API Gateway endpoint URL for Prod stage for delete comment function"
    Value: !Sub "https://${CommentsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/delete"
  DropCommentFunction:
    Description: "Delete Comment Lambda Function ARN"
    Value: !GetAtt DropCommentFunction.Arn

  SeenMovieApi:
    Description: "API Gateway endpoint URL for Prod stage for watched movie function"
    Value: !Sub "https://${WatchedsAppi}.execute-api.${AWS::Region}.amazonaws.com/Prod/watched"
  SeenMovieFunction:
    Description: "Watched Movie Lambda Function ARN"
    Value: !GetAtt SeenMovieFunction.Arn

  GetSeenMovieApi:
    Description: "API Gateway endpoint URL for Prod stage for watched movie function"
    Value: !Sub "https://${WatchedsAppi}.execute-api.${AWS::Region}.amazonaws.com/Prod/watched"
  GetSeenMovieFunction:
    Description: "Watched Movie Lambda Function ARN"
    Value: !GetAtt GetSeenMovieFunction.Arn

  LoginUsersApi:
    Description: "API Gateway endpoint URL for LoginUsersFunction"
    Value: !Sub "https://${AuthorizationApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/login"
  LoginUsersFunction:
    Description: "Login Lambda Function ARN"
    Value: !GetAtt LoginUsersFunction.Arn

  SetPassApi:
    Description: "API Gateway endpoint URL for SetPassFunction"
    Value: !Sub "https://${AuthorizationApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/set_password"
  SetPassFunction:
    Description: "Set Password Lambda Function ARN"
    Value: !GetAtt SetPassFunction.Arn

  RegisterUserApi:
    Description: "API Gateway endpoint URL for RegisterUserFunction"
    Value: !Sub "https://${AuthorizationApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/create_user"
  RegisterUserFunction:
    Description: "Create User Lambda Function ARN"
    Value: !GetAtt RegisterUserFunction.Arn

  LambdaExecutionRole:
    Description: "Implicit IAM Role created for lambda functions"
    Value: !GetAtt LambdaExecutionRole.Arn
